% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pscnseq.R
\name{pscnseq}
\alias{pscnseq}
\title{Calling the Parent-Specific Copy-Number Pipeline Step by Step}
\usage{
pscnseq(
  what = c("mpileup", "sequenza", "pscbs", "reports"),
  dataset = NULL,
  organism = NULL,
  chrs = NULL,
  samples = NULL,
  fasta = NULL,
  gcbase = NULL,
  bam_pattern = NULL,
  binsize = NULL,
  config = "config.yml",
  session_details = interactive(),
  verbose = TRUE,
  ...
)
}
\arguments{
\item{what}{(character) The step to be performed; in order, one of
\code{"mpileup"}, \code{"sequenza"}, \code{"pscbs"}, or \code{"reports"}.}

\item{dataset}{(character) The name of the dataset as on file.}

\item{organism}{(character) The name of the organism as on file.}

\item{chrs}{(character vector) The name of the chromosomes to be processed,
e.g. \code{c("1", "2", "X")}.}

\item{samples}{(character) Pathname to a tab-delimited sample specification
file, typically named \file{*.tsv}, e.g. \file{samples.tsv}.}

\item{fasta}{(character) The pathname to the FASTA reference file,
typically named \file{*.fa} or \file{*.fasta}, e.g. \file{hg19.fa}.}

\item{gcbase}{(character) The pathname to the FASTA reference file,
typically named \file{*.txt.gz}, e.g. \file{hg19.gc50Base.txt.gz}.}

\item{bam_pattern}{(character; optional) Regular expression to identify
subset of BAM files to be processed.  If NULL (default), then BAM files
matching \verb{.bwa.realigned.rmDups(|.recal)(|.bam)$} are included.}

\item{binsize}{(integer or numeric) The bin size (in basepairs) used for
binning reads into bins that then are passed to the segmentation method.}

\item{config}{(character) Pathname to YAML configuration file.
If NULL, then the configuration file is skipped.}

\item{session_details}{(logical) If TRUE, session details are reported
before starting the processing and after it completed.}

\item{verbose}{(logical) If TRUE, then verbose output is produced,
otherwise not.}

\item{\ldots}{Not used.}
}
\value{
Returns what the called \code{pscnseq_nnn()} function returns, i.e.
\code{\link[=pscnseq_mpileup]{pscnseq_mpileup()}}, \code{\link[=pscnseq_sequenza]{pscnseq_sequenza()}}, \code{\link[=pscnseq_pscbs]{pscnseq_pscbs()}}, or
\code{\link[=pscnseq_reports]{pscnseq_reports()}}.
}
\description{
Calling the Parent-Specific Copy-Number Pipeline Step by Step
}
\section{Configuration File}{

The default arguments can be set in an YAML-formatted configuration file
as given by argument \code{config}.  The default is to look for a file named
\file{config.yml} in the current directory.  To skip this file, specify
\code{config = NULL}.  An example of such a file is:\if{html}{\out{<div class="yaml">}}\preformatted{organism: Homo_sapiens
chromosomes: c(1:22, "X", "Y", "M")
fasta: annotationData/organisms/Homo_sapiens/GRCh37,hg19/UCSC/hg19.fa
gcbase: annotationData/organisms/Homo_sapiens/GRCh37,hg19/UCSC/hg19.gc50Base.txt.gz
dataset: CostelloP_2015-Exome,bwa,realigned,rmDups,recal
binsize: 100e3
samples: sampleData/samples.tsv
}\if{html}{\out{</div>}}
}

\section{Specifying arguments via command-line options}{

The arguments can be overridden by command-line options, e.g.
\code{--organism=Homo_sapiens} will take precedence of argument \code{organism},
which in turn will take precedent of what is specified in the configuration
file.
}

\section{How to call pipeline from the command line}{

Below is how you could run the pipeline step by step.  The \code{--args} option
tells \code{Rscript} that any options following should be passed as arguments
to this function.\if{html}{\out{<div class="sh">}}\preformatted{Rscript -e CostelloPSCNSeq::pscnseq --args --help
Rscript -e CostelloPSCNSeq::pscnseq --args --what=mpileup   # ~25 min
Rscript -e CostelloPSCNSeq::pscnseq --args --what=sequenza  # ~60 min
Rscript -e CostelloPSCNSeq::pscnseq --args --what=pscbs     #  ~5 min
Rscript -e CostelloPSCNSeq::pscnseq --args --what=reports   #  ~2 min
}\if{html}{\out{</div>}}
}

